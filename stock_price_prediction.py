# -*- coding: utf-8 -*-
"""Stock_Price_Prediction_Aastha_Dubey_201550001.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lhSWZiXyusYQ2LLse4MC1tB2nXDvRwfZ
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df = pd.read_csv("tesla.csv")
df.head()

df.info()

df.describe()

X = df.drop(['AdjClose','Open','Close'],axis=1)
Y = df['Close']
X

df["High"].plot.hist()

df["Open"].plot.hist()

sns.countplot(x = 'Open', data = df)

sns.countplot(x = 'High', data = df)

sns.countplot(x = 'Date', data = df)

sns.heatmap(df.isnull(), yticklabels = False, cbar = False)

sns.heatmap(df.isnull(), yticklabels = True, cbar = False)

sns.heatmap(df.isnull(), yticklabels = True, cbar = True)

sns.heatmap(df.isnull(), yticklabels = False, cbar = True)

df = df.drop_duplicates()
print(df)

df.isnull()

df.isnull().sum()

sns.set_style("whitegrid")
plt.figure(figsize=(10, 30))
sns.distplot(df.Price)
plt.show()

print(df.corr())

df.dtypes
for x in df:
    if(df[x].dtypes == "int64"):
        df[x] = df[x].astype(float)
        print(df[x].dtypes)

plt.figure(figsize=(20, 10))
correlations = df.corr()
sns.heatmap(correlations, cmap="coolwarm", annot=True)
plt.show()

df = df.select_dtypes(exclude = ['object'])
df = df.fillna(df.mean())
x = df.drop('Price', axis = 1)
y = df['Price']

predict = "Price"
data = df[["Open", "High", "Low", 
             "Close", "Price", "AdjClose"]]
x = np.array(data.drop([predict], 1))
y = np.array(data[predict])

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2)

from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(xtrain, ytrain)
predictions = model.predict(xtest)
predictions

from sklearn.metrics import mean_absolute_error
model.score(xtest, predictions)

#random forest
df.dtypes
for x in df:
    if(df[x].dtypes == "int64"):
        df[x] = df[x].astype(float)
        print(df[x].dtypes)

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 1000, random_state = 35)
regressor.fit(xtrain, ytrain)

ypred = regressor.predict(xtest)
ypred

df = pd.DataFrame({'Actual': ytest, 'Predicted': ypred})
df

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(ytest, ypred))
print('Mean squared Error:', metrics.mean_squared_error(ytest, ypred))
print('Root Mean Squared Error', np.sqrt(metrics.mean_squared_error(ytest, ypred)))

# Calculate the absolute errors
errors = abs(ypred - ytest)
# Print out the mean absolute error(mae)
print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees')
# Calculate Mean absolute Percentage Error
mape = 100 * (errors / ytest)
# Calculate and display Accuracy
accuracy = 100 - np.mean(mape)
print('Accuracy:', round(accuracy, 2), '%')

